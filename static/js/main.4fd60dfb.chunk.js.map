{"version":3,"sources":["Components/Searchbar/Searchbar.js","Components/ImageGalleryItem/ImageGalleryItem.js","Services/ImagesApi.js","Components/Button/Button.js","Components/Modal/Modal.js","Components/Loader/Loader.js","Components/ImageGallery/ImageGallery.js","App.js","index.js"],"names":["Searchbar","onSubmit","useState","searchValue","setSearchValue","className","event","preventDefault","trim","toast","error","type","autoComplete","name","value","onChange","target","toLowerCase","autoFocus","placeholder","ImageGalleryItem","webformatURL","onToggleModal","largeImageURL","onClick","src","alt","fetchImagesWithQuery","searchQuery","pageNum","axios","get","then","response","data","hits","Button","loadingMore","modalRoot","document","querySelector","Modal","onClose","largeImg","useEffect","handleKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","currentTarget","Loaders","color","height","width","Component","ImageGallery","setPageNum","images","setImages","loading","setLoading","setError","showModal","setShowModal","setLargeImageURL","getData","setTimeout","imagesApi","prevState","scrollTo","top","documentElement","scrollHeight","behavior","catch","finally","toggleModal","getAttribute","length","map","id","App","autoClose","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4fd60dfb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Searchbar({ onSubmit }) {\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const handleValueChange = (event) => {\r\n    setSearchValue(event.target.value.toLowerCase());\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (searchValue.trim() === \"\") {\r\n      toast.error(\"Enter image name, please\");\r\n      return;\r\n    }\r\n    onSubmit(searchValue, 1);\r\n    setSearchValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <header className=\"Searchbar\" onSubmit={handleSubmit}>\r\n      <form className=\"SearchForm\">\r\n        <button type=\"submit\" className=\"SearchForm-button\">\r\n          <span className=\"SearchForm-button-label\">Search</span>\r\n        </button>\r\n\r\n        <input\r\n          className=\"SearchForm-input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          name=\"searchValue\"\r\n          value={searchValue}\r\n          onChange={handleValueChange}\r\n          autoFocus\r\n          placeholder=\"Search images and photos\"\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ImageGalleryItem = ({ webformatURL, onToggleModal, largeImageURL }) => {\r\n  return (\r\n    <li\r\n      className=\"ImageGalleryItem\"\r\n      onClick={onToggleModal}\r\n      data-modal={largeImageURL}>\r\n      <img src={webformatURL} alt=\"\" className=\"ImageGalleryItem-image\" />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n\r\nImageGalleryItem.propTypes = {\r\n  onToggleModal: PropTypes.func.isRequired,\r\n  webformatURL: PropTypes.string.isRequired,\r\n  largeImageURL: PropTypes.string.isRequired,\r\n};\r\n","import axios from \"axios\";\r\n\r\nfunction fetchImagesWithQuery(searchQuery, pageNum) {\r\n  return axios\r\n    .get(\r\n      `https://pixabay.com/api/?q=${searchQuery}&page=${pageNum}&key=22812304-3b9840aba1a79f008a4d1352a&image_type=photo&orientation=horizontal&per_page=12`\r\n    )\r\n    .then((response) => response.data.hits);\r\n}\r\n\r\nexport default {\r\n  fetchImagesWithQuery,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = ({ loadingMore }) => {\r\n  return (\r\n    <div className=\"Button__box\">\r\n      <button className=\"Button\" type=\"button\" onClick={loadingMore}>\r\n        Load More\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n\r\nButton.propTypes = {\r\n  loadingMore: PropTypes.func.isRequired,\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst modalRoot = document.querySelector(\"#modal-root\");\r\n\r\nexport default function Modal({ onClose, largeImg }) {\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.code === \"Escape\") {\r\n        onClose();\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  }, [onClose]);\r\n\r\n  const handleBackdropClick = (event) => {\r\n    if (event.currentTarget === event.target) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  return createPortal(\r\n    <div className=\"Overlay\" onClick={handleBackdropClick}>\r\n      <div className=\"Modal\">\r\n        <img src={largeImg} alt=\"\" />\r\n      </div>\r\n    </div>,\r\n    modalRoot\r\n  );\r\n}\r\nModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  largeImg: PropTypes.string.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nexport default class Loaders extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Loader\">\r\n        <Loader type=\"Hearts\" color=\"#00BFFF\" height={50} width={50} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport ImageGalleryItem from \"../ImageGalleryItem\";\r\nimport imagesApi from \"../../Services/ImagesApi\";\r\nimport Button from \"../Button\";\r\nimport Modal from \"../Modal/Modal\";\r\nimport Loader from \"../Loader\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function ImageGallery({ searchValue, pageNum, setPageNum }) {\r\n  const [images, setImages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [largeImageURL, setLargeImageURL] = useState(\"\");\r\n\r\n  function getData() {\r\n    setLoading(true);\r\n    setTimeout(() => {\r\n      imagesApi\r\n        .fetchImagesWithQuery(searchValue, pageNum)\r\n        .then((data) => {\r\n          if (pageNum === 1) {\r\n            setImages(data);\r\n          } else {\r\n            setImages((prevState) => [...prevState, ...data]);\r\n\r\n            window.scrollTo({\r\n              top: document.documentElement.scrollHeight,\r\n              behavior: \"smooth\",\r\n            });\r\n          }\r\n        })\r\n        .catch((error) => setError(error))\r\n        .finally(() => {\r\n          setLoading(false);\r\n          setPageNum((prevState) => prevState + 1);\r\n        });\r\n    }, 200);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (searchValue) {\r\n      setImages([]);\r\n      getData();\r\n    }\r\n  }, [searchValue]);\r\n\r\n  const toggleModal = (event) => {\r\n    let largeImg;\r\n\r\n    if (!showModal) {\r\n      largeImg = event.currentTarget.getAttribute(\"data-modal\");\r\n    }\r\n    setShowModal(!showModal);\r\n    setLargeImageURL(largeImg);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!searchValue && <div>Enter ...</div>}\r\n      {images.length > 0 && (\r\n        <>\r\n          <ul className=\"ImageGallery\">\r\n            {images.map(({ webformatURL, largeImageURL, id }) => {\r\n              return (\r\n                <ImageGalleryItem\r\n                  key={id}\r\n                  onToggleModal={toggleModal}\r\n                  webformatURL={webformatURL}\r\n                  largeImageURL={largeImageURL}\r\n                />\r\n              );\r\n            })}\r\n          </ul>\r\n          {!loading && <Button loadingMore={getData} />}\r\n        </>\r\n      )}\r\n      {loading && <Loader />}\r\n      {showModal && (\r\n        <Modal onClose={toggleModal} largeImg={largeImageURL}></Modal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nImageGallery.propTypes = {\r\n  searchValue: PropTypes.string.isRequired,\r\n};\r\n","import React, { useState } from \"react\";\nimport Searchbar from \"./Components/Searchbar\";\nimport { ToastContainer } from \"react-toastify\";\nimport ImageGallery from \"./Components/ImageGallery\";\nimport styles from \"./styles.css\";\n\nexport default function App() {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [pageNum, setPageNum] = useState(1);\n\n  const handleFormSubmit = (searchValue, pageNum) => {\n    setSearchValue(searchValue);\n    setPageNum(pageNum);\n  };\n  return (\n    <div className=\"App\">\n      <Searchbar onSubmit={handleFormSubmit} />\n      <ToastContainer autoClose={3000} />\n      <ImageGallery\n        searchValue={searchValue}\n        pageNum={pageNum}\n        setPageNum={setPageNum}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}